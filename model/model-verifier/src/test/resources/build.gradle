/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// Common build file for the tests with same configuration

buildscript {

    // Apply the script created by `io.spine.tools.gradle.testing.TestEnvGradle`.
    //
    // The script defines `enclosingRootDir` variable that we use below.
    //
    apply from: "$rootDir/test-env.gradle"

    // Apply shared dependencies.
    apply from: "$enclosingRootDir/config/gradle/dependencies.gradle"

    // Applying from `version.gradle` inside the `buildscript` section to reuse the properties.
    //
    // As long as `buildscript` section is always evaluated first, we need to apply
    // `version.gradle` explicitly here.
    //
    apply from: "$enclosingRootDir/version.gradle"

    repositories {
        mavenLocal()
        maven {
            url = repos.spine
            content {
                includeGroup 'io.spine'
                includeGroup 'io.spine.tools'
            }
            mavenContent {
                releasesOnly()
            }
        }
        maven {
            url = repos.spineSnapshots
            content {
                includeGroup 'io.spine'
                includeGroup 'io.spine.tools'
            }
            mavenContent {
                snapshotsOnly()
            }
        }
        jcenter()
    }

    dependencies {
        classpath deps.build.protobuf
        classpath deps.build.gradlePlugins.protobuf
        classpath "io.spine.tools:spine-model-compiler:${spineBaseVersion}"
        classpath "io.spine.tools:spine-model-verifier:${versionToPublish}"
    }

    configurations.all({
        resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
    })
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'io.spine.tools.spine-model-compiler'
apply plugin: 'io.spine.tools.spine-model-verifier'

// NOTE: this file is copied from the root project in the test setup.
apply from: "$enclosingRootDir/version.gradle"

repositories {
    mavenLocal()
    maven {
        url = repos.spine
        content {
            includeGroup 'io.spine'
            includeGroup 'io.spine.tools'
        }
        mavenContent {
            releasesOnly()
        }
    }
    maven {
        url = repos.spineSnapshots
        content {
            includeGroup 'io.spine'
            includeGroup 'io.spine.tools'
        }
        mavenContent {
            snapshotsOnly()
        }
    }
    jcenter()
}

compileJava {
    options.compilerArgs += ["-processor", "io.spine.model.assemble.AssignLookup", "-AspineDirRoot=${rootDir}"]
}

dependencies {
    implementation deps.build.protobuf
    implementation "io.spine:spine-server:$versionToPublish"

    annotationProcessor "io.spine.tools:spine-model-assembler:$versionToPublish"
}

sourceSets {
    main {
        proto.srcDirs += ["$projectDir/src/main/proto"]
        java.srcDirs += ["$projectDir/generated/main/java",
                         "$projectDir/generated/main/spine"]
        resources.srcDirs += ["$projectDir/generated/main/resources"]
    }
}
